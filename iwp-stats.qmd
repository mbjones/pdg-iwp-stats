---
title: "Ice Wedge Polygon (IWP) Demo"
author: "Permafrost Discovery Gateway"
format: dashboard
server: shiny
---

```{python}
#| context: setup
from urllib.request import urlopen
import json
import pandas as pd
import plotly.express as px
import geopandas as gpd
import fiona
import morecantile
from shiny import reactive
#from shiny.express import render, ui
from shinywidgets import output_widget, render_widget
```

# IWP Stats

## {.sidebar}

```{python}
from shiny.express import render, ui
start_lat = 70.955
start_lon = -156.49
ui.input_numeric(id="lat", label="Latitude", value=start_lat, min=-90, max=90)
ui.input_numeric(id="lon", label="Longitude", value=start_lon, min=-180, max=180)

@reactive.calc
def get_tile_gdf():
    # Find the tile index for the point location configured in the inputs
    tms = morecantile.tms.get("WorldCRS84Quad")
    #mytile = tms.tile(input.lon(), input.lat(), 15) # Fixed at Zoom 15 for now
    mytile = tms.tile(input.lon(), input.lat(), 15) # Fixed at Zoom 15 for now

    # Read a single tile file
    basepath = 'https://arcticdata.io/data/10.18739/A2KW57K57/iwp_geopackage_high/WGS1984Quad/'
    filename = basepath + str(mytile.z) + '/' + str(mytile.x) + '/' + str(mytile.y) + '.gpkg'
    #layers = fiona.listlayers(filename)
    gdf = gpd.read_file(filename)
    return gdf

#gdf = get_tile_gdf()
```

## Column

```{python}
#| title: IWP allometry
@render_widget
def allometry_plot():
    return px.scatter(get_tile_gdf(), x="Length", y="Width",   color="Area", hover_name="Perimeter")
```

```{python}
#| title: Location

@reactive.calc
def get_bbox_info():
    tms = morecantile.tms.get("WorldCRS84Quad")
    mytile = tms.tile(input.lon(), input.lat(), 15) # Fixed at Zoom 15 for now

    bbox = tms.xy_bounds(mytile)
    bbox_df = pd.DataFrame(data = {'id': [1], 'value': [8]})
    bbox_geojson = morecantile.utils.bbox_to_feature(bbox.left, bbox.bottom, bbox.right, bbox.top)
    bbox_feature = dict(type='Feature', properties=dict(TILE='t1'), geometry=bbox_geojson, id=1)
    return list((bbox_feature, bbox_df, bbox))

@render_widget
def tile_map():
    bbox_info = get_bbox_info()
    bbox = bbox_info[2]
    return px.choropleth_map(
            bbox_info[1], 
            geojson=bbox_info[0], 
            locations='id',
            color='value',
            color_continuous_scale="Viridis",
            range_color=(0, 10),
            map_style="carto-positron",
            zoom=10, center = {"lat": bbox.top, "lon": bbox.left},
            opacity=.75)
```

# IWP Data

![](permabot-banner-200.png){height=200, width=871}

Learn more about the IWP dataset at <https://doi.org/10.18739/A2KW57K57>

```{python}
@render.data_frame
def dataview():
    return render.DataTable(get_tile_gdf())
```

# Polar plot

## Row

```{python}
#| title: Polar plot
df2 = px.data.wind()
px.bar_polar(df2, r="frequency", theta="direction", height=400, color="strength", color_discrete_sequence=px.colors.sequential.Plasma_r)
```

# Gapminder (examples)

## Row

### GDP and Life Expectancy {height=60%}

```{python}
df = px.data.gapminder()
df = df[df['continent'] != 'Oceania']
px.scatter(
  df, x="gdpPercap", y="lifeExp", 
  animation_frame="year", animation_group="country",
  size="pop", color="continent", hover_name="country", 
  facet_col="continent", log_x=True, size_max=45, 
  range_x=[100,100000], range_y=[25,90]
)
```

## Row {height=40%}

### Population 

```{python}
px.area(df, x="year", y="pop", color="continent", line_group="country")
```

### Life Expectancy

```{python}
px.line(df, x="year", y="lifeExp", color="continent", line_group="country")
```